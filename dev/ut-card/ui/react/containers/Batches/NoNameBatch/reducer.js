import {Map, fromJS} from 'immutable';
import {actionList} from './actions';
import {updateError} from './../helpers';
import {methodRequestState} from './../../constants';
import {actions} from 'ut-front-react/pages/Master/actions';

const defaultState = fromJS({
    opened: false,
    showSuccess: false,
    successMessage: '',
    batchName: '',
    numberOfCards: 0,
    types: [],
    businessUnits: [],
    targetBusinessUnit: 0,
    issuingBusinessUnit: 0,
    cardType: 0,
    dialogZIndex: 1500,
    errors: Map(),
    changeId: 0
});

export const noNameBatch = (state = defaultState, action) => {
    switch (action.type) {
        case actionList.OPEN:
            return state
                .update('opened', (v) => (!v))
                .set('cardType', 0)
                .set('embossedTypeId', defaultState.get('embossedTypeId'))
                .set('targetBusinessUnit', 0);
        case actionList.CLOSE:
            return state
                .set('opened', defaultState.get('opened'))
                .set('batchName', defaultState.get('batchName'))
                .set('numberOfCards', defaultState.get('numberOfCards'))
                .set('targetBusinessUnit', defaultState.get('targetBusinessUnit'))
                .set('issuingBusinessUnit', defaultState.get('issuingBusinessUnit'))
                .set('cardType', defaultState.get('cardType'))
                .set('errors', defaultState.get('errors'));
        case actionList.CREATE_NONAME_BATCH:
            if (action.methodRequestState === methodRequestState.FINISHED) {
                if (action.result) {
                    let createdBatch = (action.result.batch === undefined ? action.result[2][0] : action.result.batch[0]);
                    if (createdBatch.isAutogenerated) {
                        return defaultState
                            .set('showSuccess', true)
                            .set('successMessage', createdBatch.batchName)
                            .set('changeId', state.get('changeId') + 1);
                    }
                    return defaultState
                        .set('changeId', state.get('changeId') + 1);
                } else if (action.error) {
                    return state
                        .set('dialogZIndex', 20);
                }
            }
            return state;
        case actionList.FETCH_BUSINESS_UNITS:
            if (action.methodRequestState === methodRequestState.FINISHED && action.result) {
                let units = action.result.allBranches.map(function(branch) {
                    return {key: branch.actorId, name: branch.organizationName};
                });
                return state.set('businessUnits', fromJS(units));
            }
            return state;
        case actionList.FETCH_CARD_TYPES:
            if (action.methodRequestState === methodRequestState.FINISHED && action.result) {
                let types = action.result.type.map(function(type) {
                    return {key: type.typeId, name: type.name};
                });
                return state.set('types', fromJS(types));
            }
            return state;
        case actionList.CHANGE_BATCH_NAME:
            let newBatchErrors = updateError(action, state.get('errors'));
            return state
                .set('batchName', action.params.value)
                .set('errors', newBatchErrors);
        case actionList.CHANGE_NUMBER_OF_CARDS:
            let newNumberErrors = updateError(action, state.get('errors'));
            return state
                .set('numberOfCards', action.params.value)
                .set('errors', newNumberErrors);
        case actionList.SET_BUSINESS_UNIT:
            return state
                .set('targetBusinessUnit', action.value)
                .deleteIn(['errors', 'targetBusinessUnit']);
        case actionList.SET_ISSUING_UNIT:
            return state
                .set('issuingBusinessUnit', action.value)
                .deleteIn(['errors', 'issuingBusinessUnit']);
        case actionList.SET_CARD_TYPE:
            return state
                .set('cardType', action.value)
                .deleteIn(['errors', 'cardType']);
        case actionList.CLOSE_SUCCESS:
            return state
                .set('showSuccess', defaultState.get('showSuccess'));
        case actionList.SET_ERRORS:
            return state
                .mergeDeepIn(['errors'], fromJS(action.params.form));
        case actions.ERROR_WINDOW_CLOSE:
            return state
                .set('dialogZIndex', defaultState.get('dialogZIndex'));
        default:
            return state;
    }
};
